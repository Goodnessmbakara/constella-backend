import asyncio
import json
import logging
from typing import List, Dict, Any, Optional
import re

from ai.ai_api import openai_tool_calls
from ai.horizon.context_parsing.visual_audio_context import extract_context_from_payload, GeneralScreenAssistant

# ---------------------------------------------------------------------------
# OpenAI function-calling tool definitions
# ---------------------------------------------------------------------------

create_suggestion_tool = {
	"type": "function",
	"name": "create_suggestion",
	"description": "Based on the key topics being discussed and their screen, generate a specific, actual answer or insight. If it seems a question is being asked, then should be the answer, an essence. Otherwise, an insight suggestion if a general topic is being discussed.",
	"parameters": {
		"type": "object",
		"properties": {
			"text": {
				"type": "string",
				"description": "An emoji in the front followed by an answer automatically to whatever is being discussed.\nMust be a single sentence succinct response that the user can then expand on themselves.\nIt should cover the entire answer in one line, the high level of it. The core point to make. \nShould be an actual specific answer, not a prompt.\nMust be a max of 8 words."
			}
		},
		"required": ["text"],
		"additionalProperties": False,
	},
}

# create_follow_up_actions_tool = {
# 	"type": "function",
# 	"function": {
# 		"name": "create_follow_up_actions",
# 		"description": "Suggest actionable follow-up tasks that the user might want to take at this point in the conversation.",
# 		"parameters": {
# 			"type": "object",
# 			"properties": {
# 				"actions": {
# 					"type": "string",
# 					"description": "A concise description of the follow-up actions."
# 				}
# 			},
# 			"required": ["actions"],
# 			"additionalProperties": False,
# 		},
# 	},
# }

# Optional: tell the model it may decide no tool call is appropriate yet
pass_tool = {
	"type": "function",
	"name": "pass",
	"description": "No significant development has happened; wait for more transcript before taking action.",
	"parameters": {
		"type": "object",
		"properties": {},
		"additionalProperties": False,
	},
}

SUGGESTIONS_ASSISTANT_TOOLS = [
	create_suggestion_tool,
	pass_tool,
]

# ---------------------------------------------------------------------------
# Updated system prompt (meeting-note logic removed)
# ---------------------------------------------------------------------------
SYSTEM_PROMPT = (
	"You are an AI assistant that provides concise, context-aware suggestions based on the live transcript and the user's current screen.\n"
	"You will receive a JSON object containing the following information:\n"
	"- 'new_text': The most recent additions to the conversation transcript.\n"
	"- 'old_transcript': The full history of the conversation before 'new_text'.\n"
	"- 'user_screen_ocr': Text captured from the user's screen. Only consider this in the context of the transcript, the new text (the audio being discussed) as one piece. Do not base suggestions solely on this.\n"
	"- 'existing_suggestions': A list of suggestions that are currently displayed to the user and already generated by you. Make sure to not generate any suggestions from this. Always use the pass tool if there is no new information to generate and it already exists.\n"
	"- 'triggered_by_clicks': A boolean that is true if the user manually requested assistance.\n"
	"DO NOT address the user for the suggestions. The user will click the suggestion to have the AI expand on it and give a detailed response back."
	"\n"
	"Rules:\n"
	"1. Your ONLY output should be a function call. Do not respond with plain text.\n"
	"3. Use the 'user_screen_ocr' text only as supplementary context when forming suggestions. Bias your suggestions towards the user's transcript, last new text (of conversation), but simply consider the user_screen_ocr for overall context (but only if it's relevant, the user may be browsing other screens but their main focus is on the meeting).\n"
	"4. Use the 'suggestions' list to AVOID duplicating suggestions that are already displayed. Only emit NEW and important suggestions.\n"
	"5. If 'triggered_by_clicks' is true, be proactive and surface the most relevant suggestion.\n"
	"6. If small talk is being made that doesn't require any action, then call 'pass'. Otherwise, on any new topic introduced at all, you must generate a suggestion.\n"
	"7. Look at the existing suggestions passed to you, and only generate drastically different suggestions on new topics if a suggestion already exists. Otherwise, pass if no new information is introduced.\n"
	"8. Always create suggestions as a prompt as to messages the user can click to then have you expand on them.\n"
	"9. Quickly generate suggestions based on the context and what would be useful.\n"
	"<suggestions>\n"
	"1. Should always be a single answer.\n"
	"2. Never use exclamation marks or question marks.\n"
	"3. Quickly generate suggestions based on the context and what would be useful.\n"
	"4. If a related existing suggestion exists on the topic, only then call pass.\n"
	"5. It should always be a specific answer in itself, not a general verb or prompt.\n"
	"6. Start with the answer immediately.\n"
	"7. For example, good suggestions can be 'Greedy algorithms pick the best option now.' or 'Zero to One sheds insight on the power law in startups.'\n"
	"8. Make sure to put an emoji in the front of the suggestion though.\n"
	"9. Make the suggestion text as specific as possible with a direct answer, rather than a general verb or prompt. It should answer a question here (say Pick red for this reason rather than say consider color choices here)\n"
	"10. Add an emoji in the front just as a prefix to make it appealing to the user.\n"
	# "5. Think about the context of the user's screen and the transcript to consider what kind of answer would solve the question being asked to the best of your knowledge.\n"
	# "6. The suggestions should be helpful in achieving something, what you think would be the user's intended goal here and make them successful.\n"
	"</suggestions>\n"
	"<types_of_suggestions_based_on_user_screen>\n"
	"1. If you see any of the contexts as described below, use the rule to guide your suggestions.\n"
	"2. If on a coding screen, always generate an answer on the solution to the problem on the screen / question being discussed with a prompt to write the solution.\n"
	"3. If on a coding interview or coding question screen, generate suggestion to generate the solution with an answer to the problem.\n"
	"3. If on a screen with a lot of text, then generate suggestions to summarize the text.\n"
	"</types_of_suggestions_based_on_user_screen>\n"
)


# ---------------------------------------------------------------------------
# Simplified assistant using shared GeneralScreenAssistant
# ---------------------------------------------------------------------------

class SuggestionsAssistant(GeneralScreenAssistant):  # type: ignore
	"""Suggestions-only assistant built on the shared GeneralScreenAssistant."""

	def __init__(self, word_diff_threshold: int = 4):
		super().__init__(
			system_prompt=SYSTEM_PROMPT,
			tool_calls=SUGGESTIONS_ASSISTANT_TOOLS,
			word_diff_threshold=word_diff_threshold,
			include_suggestions=True,
			pass_ocr_to_prompt=True,
			max_tokens=100,
		)
